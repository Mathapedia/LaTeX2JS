export default class LaTeX2HTML5 {
    Text: any;
    Headers: any;
    Environments: any;
    Ignore: any;
    PSTricks: any;
    Views: any;
    Delimiters: any;
    constructor(Text?: {
        Expressions: {
            emph: RegExp;
            bf: RegExp;
            rm: RegExp;
            sl: RegExp;
            it: RegExp;
            tt: RegExp;
            mdash: RegExp;
            ndash: RegExp;
            openq: RegExp;
            closeq: RegExp;
            TeX: RegExp;
            LaTeX: RegExp;
            vspace: RegExp;
            cite: RegExp;
            href: RegExp;
            img: RegExp;
            set: RegExp;
            youtube: RegExp;
            euler: RegExp;
        };
        Functions: {
            cite: (m: any[], contents: string) => string;
            img: any;
            youtube: any;
            href: any;
            set: any;
            euler: any;
            emph: any;
            bf: any;
            rm: any;
            sl: any;
            it: any;
            tt: any;
            ndash: any;
            mdash: any;
            openq: any;
            closeq: any;
            vspace: any;
            TeX: any;
            LaTeX: any;
        };
    }, Headers?: {
        Expressions: {
            bq: RegExp;
            claim: RegExp;
            corollary: RegExp;
            definition: RegExp;
            endclaim: RegExp;
            endcorallary: RegExp;
            enddefinition: RegExp;
            endexample: RegExp;
            endproblem: RegExp;
            endsolution: RegExp;
            endtheorem: RegExp;
            eq: RegExp;
            example: RegExp;
            problem: RegExp;
            proof: RegExp;
            qed: RegExp;
            solution: RegExp;
            theorem: RegExp;
        };
        Functions: {
            bq: () => string;
            claim: () => string;
            corollary: () => string;
            definition: () => string;
            endclaim: () => string;
            endcorollary: () => string;
            enddefinition: () => string;
            endexample: () => string;
            endproblem: () => string;
            endsolution: () => string;
            endtheorem: () => string;
            eq: () => string;
            example: () => string;
            problem: () => string;
            proof: () => string;
            qed: () => string;
            solution: () => string;
            theorem: () => string;
        };
    }, Environments?: string[], Ignore?: RegExp[], PSTricks?: any, Views?: {});
    addEnvironment(name: string): void;
    addView(name: string, _options: any): void;
    addText(name: string, exp: RegExp, func: Function): void;
    addHeaders(name: string, begin?: string, end?: string): void;
    getParser(): any;
    parse(text: string): any[];
}
